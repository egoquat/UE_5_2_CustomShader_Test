
#pragma once

#define RT_PAYLOAD_TYPE_VFX 1

#include "/Engine/Private/Common.ush"
#include "/Engine/Private/RayTracing/RayTracingCommon.ush"
#include "/Engine/Private/RayTracing/RayTracingHitGroupCommon.ush"
 
RWTexture2D<float4> outTex;
RaytracingAccelerationStructure TLAS;
uint2 ResTexture;

struct FCusotmRayPayload : FIntersectionPayload
{
    float3 TranslatedWorldPosition;
    float3 WorldNormal;
    void SetPosition(float3 position)
    {
        TranslatedWorldPosition = position;
    }
};

float3 RotateVectorYaw(float3 dir, float angle) {
    angle = radians(angle);
    float sinAngle = sin(angle);
    float cosAngle = cos(angle);
    float3x3 rotationMatrix = float3x3(
        cosAngle, sinAngle, 0,
        -sinAngle, cosAngle, 0, 
        0, 0, 1
    );
    return mul(rotationMatrix, dir);
}

float3 RotateVectorPitch(float3 dir, float angle) {
    angle = radians(angle);
    float sinAngle = sin(angle);
    float cosAngle = cos(angle);
    float3x3 rotationMatrix = float3x3(
        cosAngle, 0, -sinAngle,
        0, 1, 0, 
        sinAngle, 0, cosAngle
    );
    return mul(rotationMatrix, dir);
}

float3 RotateVectorRoll(float3 dir, float angle) {
    angle = radians(angle);
    float sinAngle = sin(angle);
    float cosAngle = cos(angle);
    float3x3 rotationMatrix = float3x3(
        1, cosAngle, sinAngle,
        0, -sinAngle, cosAngle, 
        0, 0, 1 
    );
    return mul(rotationMatrix, dir);
}

struct Quaternion
{
    float x, y, z, w;
    float3 xyz() { return float3(x,y,z);}
};

Quaternion CreateQuaternion(float3 euler)
{
    float cy = cos(euler.y * 0.5);
    float sy = sin(euler.y * 0.5);
    float cp = cos(euler.x * 0.5);
    float sp = sin(euler.x * 0.5);
    float cr = cos(euler.z * 0.5);
    float sr = sin(euler.z * 0.5);

    Quaternion q;
    q.x = cy * sp * cr + sy * cp * sr;
    q.y = sy * cp * cr - cy * sp * sr;
    q.z = cy * cp * sr - sy * sp * cr;
    q.w = cy * cp * cr + sy * sp * sr;

    return q;
}

float3 RotateVectorByQuaternion(float3 dir, Quaternion q)
{
    float qw = q.w;
    float qx = -q.x;
    float qy = -q.y;
    float qz = -q.z;
    
    float rx = dir.x * (qw * qw + qx * qx - qy * qy - qz * qz) + 2.0f * (qy * dir.y - qz * dir.z) * qw + 2.0f * (qx * dir.y + qw * dir.z) * qz;
    float ry = 2.0f * (qz * dir.x + qw * dir.y + qx * dir.z) * qy + dir.y * (qw * qw - qx * qx + qy * qy - qz * qz) + 2.0f * (-qw * dir.x + qy * dir.z) * qx;
    float rz = 2.0f * (-qw * dir.y + qx * dir.x) * qz + 2.0f * (qw * dir.x + qy * dir.y + qz * dir.z) * qx + dir.z * (qw * qw - qx * qx - qy * qy + qz * qz);
    
    return float3(rx, ry, rz);
}

float3 RotateVectorByQuaternion2(float3 dir, Quaternion q)
{
    float3 t = 2.0 * cross(q.xyz(), dir);
    return dir + q.w * t + cross(q.xyz(), t);
}

float3 RotateVectorYawPitchRoll(float3 vec, float yaw, float pitch, float roll)
{
    yaw = radians(yaw); pitch = radians(pitch); roll = radians(roll);
    float3 euler = float3(roll, pitch, yaw);
    Quaternion qRot = CreateQuaternion(euler);
    vec = RotateVectorByQuaternion(vec, qRot);
    return vec;
}

void ReconstructWorldPosition(uint2 PixelCoord, uint2 ResTex, float DeviceZ, out float3 OutTranslatedWorldPosition, out float3 OutCameraDirection)
{
    uint2 ResView = View.ViewSizeAndInvSize.xy;
    float2 coord = PixelCoord;
    coord.x = coord.x * ((float)ResView.x / (float)ResTex.x);
    coord.y = coord.y * ((float)ResView.y / (float)ResTex.y);
    float4 TranslatedWorldPosition = mul(float4(coord + 0.5, DeviceZ, 1), View.SVPositionToTranslatedWorld);
    TranslatedWorldPosition.xyz /= TranslatedWorldPosition.w;
    OutTranslatedWorldPosition = TranslatedWorldPosition.xyz;
    OutCameraDirection = normalize(TranslatedWorldPosition.xyz - View.TranslatedWorldCameraOrigin);
}

RAY_TRACING_ENTRY_RAYGEN(RayTraceTestRGS)
{
    uint2 PixelCoord = DispatchRaysIndex().xy + View.ViewRectMin.xy;
    float3 WorldPosition;
    float3 CameraDirection;
    ReconstructWorldPosition(PixelCoord, ResTexture, 0.1f, WorldPosition, CameraDirection);

    //float4 TranslatedWorldPosition = mul(float4(0.5f, 0.5f, 1, 1), View.SVPositionToTranslatedWorld);
    //TranslatedWorldPosition.xyz /= TranslatedWorldPosition.w;
    //WorldPosition = TranslatedWorldPosition.xyz;
    //WorldPosition = View.TranslatedWorldCameraOrigin;
    
    RayDesc Ray;
    Ray.Origin = WorldPosition;
    CameraDirection = RotateVectorYawPitchRoll(CameraDirection, 40, 0, 0);
    //Ray.Direction = RotateVectorYaw(CameraDirection, 0.0f);
    //Ray.Direction = RotateVectorPitch(CameraDirection, 20.0f);
    Ray.Direction = CameraDirection;
    Ray.TMin = 0.0f;
    Ray.TMax = 10000.0f;
 
    uint RayFlags = RAY_FLAG_FORCE_OPAQUE | RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
    //uint RayFlags = 0;
    //uint RayFlags = RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH;
 
    //FIntersectionPayload Payload = (FIntersectionPayload) 0;
    FVFXTracePayload Payload = (FVFXTracePayload) 0;
    //FCusotmRayPayload Payload = (FCusotmRayPayload) 0;
	
    TraceRay(
        TLAS,   // AccelerationStructure
        RayFlags,
        RAY_TRACING_MASK_OPAQUE,
        RAY_TRACING_SHADER_SLOT_MATERIAL, // RayContributionToHitGroupIndex, defined by UE4
        RAY_TRACING_NUM_SHADER_SLOTS,     // MultiplierForGeometryContributionToShaderIndex, defined by UE4
        0,      // MissShaderIndex
        Ray,    // RayDesc
        Payload // Payload
    );
 
    if (Payload.IsHit() && Payload.HitT <= 10000.0f)
    {
        //outTex[PixelCoord] = float4(Payload.TranslatedWorldPosition,1);
        float rt = clamp(Payload.HitT/10000.0f, 0, 1);
        float ch = 1.0f/3.0f;
        float g=saturate(rt*3),b=saturate((rt-ch)*3),r=saturate((rt-(ch*2))*3);
        outTex[PixelCoord] = float4(r,g,b,1);
    }
    else
    {
        outTex[PixelCoord] = float4(0,0,0,1);
    }
}

RAY_TRACING_ENTRY_CLOSEST_HIT(RayTraceTestCHS, FVFXTracePayload, payload, BuiltInTriangleIntersectionAttributes, attribs)
{
    //float3 wPos = TranslatedWorldRayOrigin() + WorldRayDirection() * RayTCurrent();
    //payload.TranslatedWorldPosition = TranslatedWorldRayOrigin() + WorldRayDirection() * RayTCurrent();
    payload.HitT = RayTCurrent();
    //payload.HitT = RayTCurrent();
}

RAY_TRACING_ENTRY_MISS(RayTraceTestMS, FVFXTracePayload, payload)
{
    payload.SetMiss();
}